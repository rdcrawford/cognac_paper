#  -----------------------------------------------------------------------------
# 
# 2020/05/20
# Ryan D. Crawford
# ------------------------------------------------------------------------------
#  
# ------------------------------------------------------------------------------

# ---- Load libraries ----------------------------------------------------------

library( cognac )

# ---- Variable initializations ------------------------------- -----------------

load( "../data/2020_05_26_ST258_cognac_algns.Rdata" )

algnLen = as.numeric(
  strsplit( algnData$geneData[ nrow( algnData$geneData ), 3], '-')[[ 1 ]][ 2 ]
  )

curDate = "2020_07_14"

rData = "../data/2020_07_14_filter_low_qual_cognac_positions.Rdata"
load( rData )
figDir = "../figures/2020_07_14_filter_low_qual_cognac_positions.Rdata"
if( !file.exists( figDir ) ) system( paste( "mkdir", figDir ) )

# ---- Function definitions ----------------------------------------------------

GetMin = function( distMat )
{
  return( min( as.dist( distMat ) ) )
}

GetMax = function( distMat )
{
  return(  max( as.dist( distMat ) ) )
}

GetMeanRef = function( distMat )
{
  return( mean( distMat[ 1, 2:ncol( distMat ) ] ) )
}

GetSum = function( distMat )
{
  return(  sum( as.dist( distMat ) ) )
}

# ------------------------------------------------------------------------------

# Create the partiions accross the alignmet
binVal = 15
partitions = seq( 1, 963167, binVal )

# Get the blosum distances for each partition in the alingnment 
distMatList = 
  CalcAlgnPartitionDists( algnData$aaAlgnPath, "logLike", partitions )

# Find partitions where there are negative alignment values indicating
# poor alignment quality
isLowQual = sapply( 1:length(distMatList), 
  function(i) TRUE %in% ( distMatList[[i]] < 0 )
  )

# Find the positions of the low quality partitions in the 
aaEndPos   = which( isLowQual ) * binVal
ntBinVal   = binVal * 3 
ntEndPos   = aaEndPos * 3
ntStartPos = ntEndPos - ntBinVal + 1

# Create a path to write the filtered alignment
filteredAlgnPath = paste0(
  "../data/", curDate, "_ST258_cognac_nt_algn_filtered_", ntBinVal, ".fasta"
  )

# Delete the poor quality positions an write to the new alignmet
DeletePartitions( algnData$ntAlgnPath, ntStartPos, ntEndPos, filteredAlgnPath )

# ------------------------------------------------------------------------------

distFns = c( GetMin, GetMax, GetMeanRef, GetSum )
desc    = c( 
  "Minimum distance",
  "Maximum distance", 
  "Mean distance to reference",
  "Distance matrix sum"
  )

for ( i in 1:length(distFns) )
{
  fn =  distFns[i]
  distVals = sapply( 1:length(distMatList), 
    function(i) fn[[1]]( distMatList[[i]] )
    )
 
  figPath = gsub(' ', '_', paste0( figDir, curDate, desc[i], '_', binVal ) )
  png( filename = figPath, height = 850, width = 850 )
  barplot(
    distVals,
    main = paste( "Blosum distance: ", desc[i] ),
    xlab = paste0("Partiton (", binVal, " residues)"),
    ylab = "Alignment Distance"
    )
  dev.off()
}

# ---- Save the data -----------------------------------------------------------

save( file = rData, list = ls() )

# ------------------------------------------------------------------------------
