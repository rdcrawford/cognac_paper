# -----------------------------------------------------------------------------
#' Make Pairwise Distance Histogram
#  2020/05/28
#  Ryan D. Crawford
#  -----------------------------------------------------------------------------
#' @description This provides a function for creating histograms using base R
#'   that allows for better comparisons across multiple observations. 
#'   A list of matricies is input and a histogram showing the
#'   illustrating the distribution of parwise distances is created. The bins
#'   and the y-axis are uniform across each plot. Bins for the histogram are
#'   open on the right and closed on the left.
#' @param distMatList List with matricies to be plotted
#' @param binSize Size of the bins to use when making the histogram. By 
#'   default the data are divided into 100 equally sized bins. 
#' @param titles Optional. The title to be displayed above each histogram. By
#'   default no titles are used.
#' @param plotCols Optional. Vector of colors to be used for the plot. Must
#'   Be lenght one or the length of the input list. Washington Nationals 
#'   lucky blue by default.
#' @param numColumns Optional. Number of columns for the plot. One by default.
#' @param xLimMax Optional. Maximum bin size for the histogram. Any values 
#'   larger than this are ignored. By default the largest value in all of the
#'   matrices.
#' @param yLimMax Optional. Maximum value to use for the y-axis
#' @param xLabBin Optional. This parameter is the bin size for the x-axis 
#'   labels. If equal to 'binSize' a tick is plotted for each bin. By default
#'   10x the 'binSize'
#' @param plotLabsOnLast Optional. If true, the x-axis is plotted on the final
#'   plot only.
#' @param xAxisPos Optional. This adjusts the position of the x-axis. Integer
#'   specifying the y-axis intercept. 
#' @reurn Void. The Histogram is plotted to the default output. 
#' @export
#  -----------------------------------------------------------------------------

MakePairwiseDistHistogram = function(
  distMatList, binSize, titles, plotCols, numColumns, xLimMax, yLimMax, 
  xLabBin, xAxisPos, plotLabsOnLast
  )
{
  # Assign default values to missing arguments
  nMats = length( distMatList )
  if ( missing( plotCols) )      plotCols       =  "#212759"
  if ( missing(titles) )         titles         = rep( '', nMats )
  if ( missing(plotLabsOnLast) ) plotLabsOnLast = FALSE
  if ( missing(numColumns) )     numColumns     = 1
  
  # Set up the plotting parameters
  par( mfrow = c( nMats, numColumns ) )
  
  # Make a vector with the colors the length of the number of distance
  # matricies
  if ( length( plotCols ) == 1 ) plotCols = rep( plotCols, nMats )
  if ( length( plotCols) < nMats ) 
    stop("The length of the plot colors must be 1 or the number of matricies")
  
  # Create a list where each elment contains a vector of the pairwise
  # distances between genomes
  distValList = sapply( seq( nMats ), function(i)
  {
    if (is.matrix( distMatList[[1]])) 
    {
      distVals = ConvertDistMatToVec( distMatList[[i]] )
    } else {
      distVals = distMatList[[i]]
    }
    return( list( distVals[ order(distVals) ] ) )
  })

  if ( missing(binSize) ) binSize = xLimMax / 100
  if ( missing(xLabBin) ) xLabBin = binSize * 10
  
  # Do some error checking on the bin sizes
  if ( xLabBin < binSize )
    stop( "The bin for the x labels must be smaller than the bin size" )
  if ( xLabBin %% binSize )
    stop( "The bin for the xlabels must be divisible by the bin size" )
  
  # Get the range fo the x-axis
  if ( missing(xLimMax) )
  {
    xLimMax = max(sapply( seq(nMats),
      function(i) distValList[[ i ]][ length( distValList[[ i ]] ) ]
      ))
    xLimMax = max( ceiling( xLimMax / xLabBin ) * xLabBin )
  }
  
  # Create a vector with the size of the bins
  binVals = seq( 0, xLimMax, binSize )

  # Make a list with the bin values
  binCountList =  sapply( seq(nMats), function(i)
  {
    distVals  = distValList[[i]]
    binCounts = sapply( 2:length(binVals),
      function(j) 
        sum( distVals[ distVals >= binVals[ j - 1 ] ] < binVals[ j ] )
      )
    return( list( binCounts ) )
  })

  # Set the range for the y-axis
  if ( missing(yLimMax) )
  {
    yLimMax = max( sapply( seq(nMats), function(i) max( binCountList[[i]] ) ) )
    yRange  = GetAxisRange( yLimMax )
  } else {
    yRange = c( 0, yLimMax )
  }
  if ( missing(xAxisPos) ) xAxisPos = yRange[2] * -0.025
  
  # Get he x-axis labels 
  xLabels   = seq( 0, ceiling( xLimMax / xLabBin ) * xLabBin, by = xLabBin )
  
  # Plot the histograms
  for ( i in seq( nMats ) )
  {
    # Create a vector of colors where white is 0
    histCols = sapply( binCountList[[i]], function(x)
    {
      if ( x ) return( plotCols[i] )
      return( "white" )
    })
    
    # Make the barplot
    barplot(
      binCountList[[i]],
      main   = titles[i],
      col    = histCols,
      border = histCols,
      ylab   = "",
      ylim   = yRange,
      las    = 2,
      )
    
    axisStart = par()$ylbias #* par()$plt[1]
    axisEnd   = ( par()$usr[2] * ( par()$plt[2] + 0.025 ) ) + axisStart
    atVals    = seq( axisStart, axisEnd, length.out = length(xLabels) )
    
    if ( i == nMats || !plotLabsOnLast )
    {
      axis(
        side   = 1,
        at     = atVals,
        labels = as.character( xLabels ),
        las    = 3,
        pos    = xAxisPos
        )
    }
  }
}

# ------------------------------------------------------------------------------
