#  -----------------------------------------------------------------------------
# 
# 2020/05/20
# Ryan D. Crawford
# ------------------------------------------------------------------------------
#  
# ------------------------------------------------------------------------------

# ---- Load libraries ----------------------------------------------------------

library( cognac )

# ---- Variable initializations ------------------------------- -----------------

load( "../data/2020_05_26_ST258_cognac_algns.Rdata" )


algnLen = as.numeric(
  strsplit( algnData$geneData[ nrow( algnData$geneData ), 3], '-')[[ 1 ]][ 2 ]
  )

curDate = "2020_07_13"

rData = "../data/2020_07_10_test_algn_filtering_functions.Rdata"

figDir = "../figures/2020_07_10_test_algn_filtering_functions/"
if( !file.exists( figDir ) ) system( paste( "mkdir", figDir ) )

# ---- Function definitions ----------------------------------------------------

GetMin = function( distMat )
{
  return( min( as.dist( distMat ) ) )
}

GetMax = function( distMat )
{
  return(  max( as.dist( distMat ) ) )
}

GetMeanRef = function( distMat )
{
  return( mean( distMat[ 1, 2:ncol( distMat ) ] ) )
}

GetSum = function( distMat )
{
  return(  sum( as.dist( distMat ) ) )
}


# 
PlotResults = function( distMatList, distType, binType )
{
  
  distFns = c( GetMin, GetMax, GetMeanRef, GetSum )
  desc    = c( 
    "Minimum distance", 
    "Maximum distance", 
    "Mean distance to reference", 
    "Distance matrix sum"  
    )
  
  for ( i in 1:length(distFns) )
  {
    fn =  distFns[i]
    distVals = sapply( 1:length(distMatList), 
      function(i) fn[[1]]( distMatList[[i]] )
      )
   
    figPath = gsub(' ', '_', paste0( figDir, curDate, desc[i], '_', binType ) )
    png( filename = figPath, height = 850, width = 850 )
    barplot(
      distVals,
      main = paste( distType, ": ", desc[i] ),
      xlab = paste0("Partiton (", binType, ")"),
      ylab = "Alignment Distance"
      
      )
    dev.off()
  }
}

# ------------------------------------------------------------------------------

binVals = c( 20, 25, 30 )

logLikeList = vector( "list", length = length( binVals ) )
normPrList  = vector( "list", length( binVals ) )

for ( i in 1:length( binVals ) )
{
  partitions = seq( 1, algnLen, binVals[i] )
  
  logLikeList[[i]] = CalcAlgnPartitionDists(
    algnData$aaAlgnPath,  "logLike", partitions
    )
  normPrList[[i]] = CalcAlgnPartitionDists(
    algnData$aaAlgnPath,  "normProb", partitions
    )
}

# ---- Save the data -----------------------------------------------------------

save( file = rData, list = ls() )

# ------------------------------------------------------------------------------

for ( i in 1:length( binVals ) )
{
  PlotResults( 
    logLikeList[[i]], "Log Liklihood", paste( binVals, "aa residues" )
    )
  
  PlotResults( 
    normPrList[[i]], "Normalized substitution probability", 
    paste( binVals, "aa residues" )
    )
}

partitions = seq( 1, nchar( algn )[1], 15 )

distMatList = CalcAlgnPartitionDists( faPath, "logLike", partitions )

refDists = sapply( 1:length(distMatList), 
  function(i) min( as.dist( distMatList[[i]] ) )
  )


# ---- Save the data -----------------------------------------------------------

save( file = rData, list = ls() )

# ------------------------------------------------------------------------------
