plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "\nNumber of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "\n\nNumber of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "\n \nNumber of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "\nx\nNumber of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "\nx\n\nx\n\nx\nNumber of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes\n",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LAB
)
timeMat[ 6, ] = sapply( 1:ncol( timeMat), function(j) sum( timeMat[ 6:9, j] ) )
timeMat = timeMat[ 1:6, ]
colnames(timeMat) = genusNames
set.seed( 144 )
bpCols = plotCols[ sample.int( length(plotCols) ) ]
steps = c(
"Parsing the data on the input genomes",
"Finding orthologs with cd-hit",
"Filtering for single copy genes",
"Selecting genes to include in the alignment",
"Aligning and concatenating orthologous genes",
"Creating output files"
)
par( mar = c( 12.2, 7.5, 4.1, 0.5) )
barplot(
timeMat[ , order(totalTime, decreasing = TRUE) ],
col      = bpCols,
border   = bpCols,
las      = 2,
ylim     = genomeToolBox::GetAxisRange( max( colSums(timeMat) ), 5 ),
ylab     = "Run-time (minutes)\n",
cex      = 2,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topright",
legend = steps,
col = bpCols,
pch = 15,
cex = 1.5
)
legend(
"topright",
legend = steps,
col = bpCols,
pch = 15,
cex = CEX_LAB
)
CEX_LGD  = 1.5
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LAB
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LGD
)
CEX_LGD  = 1.75
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LGD
)
legend(
"topright",
legend = steps,
col = bpCols,
pch = 15,
cex = CEX_LGD
)
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LGD
)
timeMat = timeMat[ 1:6, ]
colnames(timeMat) = genusNames
set.seed( 144 )
bpCols = plotCols[ sample.int( length(plotCols) ) ]
steps = c(
"Parsing the data on the input genomes",
"Finding orthologs with cd-hit",
"Filtering for single copy genes",
"Selecting genes to include in the alignment",
"Aligning and concatenating orthologous genes",
"Creating output files"
)
par( mar = c( 12.2, 7.5, 4.1, 0.5) )
barplot(
timeMat[ , order(totalTime, decreasing = TRUE) ],
col      = bpCols,
border   = bpCols,
las      = 2,
ylim     = genomeToolBox::GetAxisRange( max( colSums(timeMat) ), 5 ),
ylab     = "Run-time (minutes)\n",
cex      = 2,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topright",
legend = steps,
col = bpCols,
pch = 15,
cex = CEX_LGD
)
steps = c(
"Parsing the data on the input genomes",
"Finding orthologs with cd-hit",
"Filtering for single copy genes",
"Selecting genes to include in the alignment",
"Aligning and concatenating marker genes",
"Creating output files"
)
par( mar = c( 12.2, 7.5, 4.1, 0.5) )
barplot(
timeMat[ , order(totalTime, decreasing = TRUE) ],
col      = bpCols,
border   = bpCols,
las      = 2,
ylim     = genomeToolBox::GetAxisRange( max( colSums(timeMat) ), 5 ),
ylab     = "Run-time (minutes)\n",
cex      = 2,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topright",
legend = steps,
col = bpCols,
pch = 15,
cex = CEX_LGD
)
steps = c(
"Parsing the data on the input genomes",
"Finding orthologs with cd-hit",
"Filtering for single copy genes",
"Selecting  genes to align",
"Aligning and concatenating marker genes",
"Creating output files"
)
par( mar = c( 12.2, 7.5, 4.1, 0.5) )
barplot(
timeMat[ , order(totalTime, decreasing = TRUE) ],
col      = bpCols,
border   = bpCols,
las      = 2,
ylim     = genomeToolBox::GetAxisRange( max( colSums(timeMat) ), 5 ),
ylab     = "Run-time (minutes)\n",
cex      = 2,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topright",
legend = steps,
col = bpCols,
pch = 15,
cex = CEX_LGD
)
steps = c(
"Parsing the data on the input genomes",
"Finding orthologs with cd-hit",
"Filtering for single copy genes",
"Selecting  genes to align",
"Aligning and concatenating genes",
"Creating output files"
)
par( mar = c( 12.2, 7.5, 4.1, 0.5) )
barplot(
timeMat[ , order(totalTime, decreasing = TRUE) ],
col      = bpCols,
border   = bpCols,
las      = 2,
ylim     = genomeToolBox::GetAxisRange( max( colSums(timeMat) ), 5 ),
ylab     = "Run-time (minutes)\n",
cex      = 2,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topright",
legend = steps,
col = bpCols,
pch = 15,
cex = CEX_LGD
)
CEX_LGD  = 2
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LGD
)
timeMat[ 6, ] = sapply( 1:ncol( timeMat), function(j) sum( timeMat[ 6:9, j] ) )
timeMat = timeMat[ 1:6, ]
colnames(timeMat) = genusNames
set.seed( 144 )
bpCols = plotCols[ sample.int( length(plotCols) ) ]
steps = c(
"Parsing the data on the input genomes",
"Finding orthologs with cd-hit",
"Filtering for single copy genes",
"Selecting  genes to align",
"Aligning and concatenating genes",
"Creating output files"
)
par( mar = c( 12.2, 7.5, 4.1, 0.5) )
barplot(
timeMat[ , order(totalTime, decreasing = TRUE) ],
col      = bpCols,
border   = bpCols,
las      = 2,
ylim     = genomeToolBox::GetAxisRange( max( colSums(timeMat) ), 5 ),
ylab     = "Run-time (minutes)\n",
cex      = 2,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topright",
legend = steps,
col = bpCols,
pch = 15,
cex = CEX_LGD
)
timeFracMat = sapply( 1:ncol(timeMat),
function(j) timeMat[ , j ] / sum( timeMat[ , j ] )
)
steps = c(
"Parsing input files",
"Finding orthologs with cd-hit",
"Filtering for single copy genes",
"Selecting  genes to align",
"Aligning and concatenating genes",
"Creating output files"
)
par( mar = c( 12.2, 7.5, 4.1, 0.5) )
barplot(
timeMat[ , order(totalTime, decreasing = TRUE) ],
col      = bpCols,
border   = bpCols,
las      = 2,
ylim     = genomeToolBox::GetAxisRange( max( colSums(timeMat) ), 5 ),
ylab     = "Run-time (minutes)\n",
cex      = 2,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topright",
legend = steps,
col = bpCols,
pch = 15,
cex = CEX_LGD
)
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LGD
)
CEX_LAB  = 2
CEX_AXIS = 2
CEX_PCH  = 3
CEX_LGD  = 2
par( mar = c( 7.1, 7.5, 4.1, 2.1) )
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LGD
)
par( mar = c( 7.1, 7.5, 4.1, 3.1) )
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LGD
)
par( mar = c( 7.1, 7.5, 4.1, 3.5) )
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LGD
)
par( mar = c( 7.1, 7.5, 4.1, 4) )
plot(
x        = statMatrix[ , 1 ],
y        = totalTime,
col      = plotCols,
pch      = 19,
ylab     = "Total run time (minutes)\n",
xlab     = "Number of genomes",
cex      = CEX_PCH,
las      = 1,
cex.lab  = CEX_LAB,
cex.axis = CEX_AXIS
)
legend(
"topleft",
col = plotCols,
legend = genusNames,
pch = 15,
cex = CEX_LGD
)
